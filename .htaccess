# ===================================================
# WORKING .HTACCESS FOR LETGODBETRUE API INTEGRATION
# Compatible with both staging environments
# ===================================================

# Force HTTPS (if not already on HTTPS)
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteCond %{HTTPS} !=on [NC]
    RewriteCond %{REQUEST_URI} !^/\.well-known/acme-challenge/
    RewriteRule ^(.*)$ https://%{HTTP_HOST}/$1 [R=301,L]
</IfModule>

# PROXY API CONFIGURATION
# This must come BEFORE WordPress rules
<IfModule mod_rewrite.c>
    RewriteEngine On
    
    # Handle all proxy-api requests
    RewriteCond %{REQUEST_URI} ^/proxy-api/(.*)$ [NC]
    RewriteRule ^proxy-api/(.*)$ /api-proxy.php?endpoint=$1 [QSA,L]
    
    # Specific endpoint handlers (fallback)
    RewriteRule ^proxy-api$ /api-proxy.php [QSA,L]
    RewriteRule ^proxy-api/$ /api-proxy.php [QSA,L]
    
    # Explicit handler for vote endpoint
    RewriteRule ^proxy-api/vote$ /api-proxy.php?endpoint=vote [QSA,L]
    
    # Prevent direct access to api-proxy.php
    RewriteCond %{THE_REQUEST} ^[A-Z]{3,9}\ /api-proxy\.php
    RewriteRule ^api-proxy\.php$ - [F]
</IfModule>

# PASSWORD PROTECTION SECTION
# This will be managed by cPanel - DO NOT EDIT between the markers
#----------------------------------------------------------------cp:ppd
# Section managed by cPanel: Password Protected Directories     -cp:ppd
# - Do not edit this section of the htaccess file!              -cp:ppd
#----------------------------------------------------------------cp:ppd
# [cPanel will insert password protection rules here if enabled]
#----------------------------------------------------------------cp:ppd
# End section managed by cPanel: Password Protected Directories -cp:ppd
#----------------------------------------------------------------cp:ppd

# EXCLUDE API FILES FROM PASSWORD PROTECTION
# Allow access to API files without authentication
<Files "api-proxy.php">
    Satisfy Any
    Allow from all
</Files>

<Files "search-proxy.php">
    Satisfy Any
    Allow from all
</Files>

<Files "admin-ajax.php">
    Satisfy Any
    Allow from all
</Files>

# SECURITY HEADERS
<IfModule mod_headers.c>
    Header set X-Content-Type-Options "nosniff"
    Header set X-Frame-Options "SAMEORIGIN"
    Header set X-XSS-Protection "1; mode=block"
    Header set Referrer-Policy "strict-origin-when-cross-origin"
    
    # CORS Headers for proxy-api and search-proxy
    <FilesMatch "(api-proxy|search-proxy)\.php$">
        Header set Access-Control-Allow-Origin "*"
        Header set Access-Control-Allow-Methods "GET, POST, OPTIONS"
        Header set Access-Control-Allow-Headers "Content-Type, Authorization"
        Header set Access-Control-Max-Age "3600"
    </FilesMatch>
</IfModule>

# PROPER MIME TYPES
<FilesMatch "\.js$">
    ForceType application/javascript
</FilesMatch>

# ALLOW OPTIONS REQUESTS FOR CORS
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteCond %{REQUEST_METHOD} OPTIONS
    RewriteRule ^(.*)$ - [R=200,L]
</IfModule>

# BEGIN WordPress
# The directives (lines) between "BEGIN WordPress" and "END WordPress" are
# dynamically generated, and should only be modified via WordPress filters.
# Any changes to the directives between these markers will be overwritten.
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress

# PHP HANDLER (managed by cPanel)
# php -- BEGIN cPanel-generated handler, do not edit
# Set the "ea-php81" package as the default "PHP" programming language.
<IfModule mime_module>
  AddHandler application/x-httpd-ea-php81 .php .php8 .phtml
</IfModule>
# php -- END cPanel-generated handler, do not edit